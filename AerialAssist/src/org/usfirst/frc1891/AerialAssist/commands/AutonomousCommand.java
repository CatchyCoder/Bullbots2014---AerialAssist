// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1891.AerialAssist.commands;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.bullbots.core.Jaguar;
import org.usfirst.frc1891.AerialAssist.Robot;
import org.usfirst.frc1891.AerialAssist.RobotMap;

    /*
    Autonomous:
    1: Robot will start facing one of the sides,
    start loading and looking for tape instantly
    2: Record if we can see the tape
    3: Straiten the robot up, and drive a certain distance
    4: Turn towards the side that didn't have its tape lit
    5: Fire.. then reload and tilt the shooter down
    */

/**
 *
 */
public class  AutonomousCommand extends Command {
    
    private Robot robot;
    
    private final double 
            // The maximum amount of times to check tape at the 
            // start of autonomous
            MAX_TAPE_CHECK_COUNT = 10,
            
            TURN_AMOUNT = 0.1,
            TURN_SPEED = 120,
            
            DISTANCE = 1.5,
            FORWARD_SPEED = 120;
    
    private boolean 
            isLookingForTape = false,
            tapeFound = false,
            
            straight = false,
            inPosition = false,
            readyToFire = false,
            hasFired = false;
    
    private int tapeCheckCount = 0;
    private double startPosition;
    
    public AutonomousCommand(Robot robot) {
        this.robot = robot;
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        // Setting the mode on the table
        robot.getTable().putString("robotMode", "AUTONOMOUS");
        resetStartPos();
    }
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        try {
            System.out.println("\nAutonomous running");

            // Updating shooting, it will automatically adjust for autonomous mode
            //Robot.shooter.update();
            
            // Rounding the value in order not to overload the cRIO
            double roundedCurrentPos = Math.abs(Jaguar.roundValue(RobotMap.driveJags2.getMasterJag().getPosition()));

            if(isLookingForTape) {
                if(robot.getTable().getBoolean("tapefound")) {
                    System.out.println("\tTape found");
                    tapeFound = true;
                    isLookingForTape = false;
                }
                // If the robot has not checked for tape at least
                // a certain amount of times, keep checking for tape
                else if(tapeCheckCount < MAX_TAPE_CHECK_COUNT) {
                    System.out.println("\tLooking for tape");
                    tapeCheckCount++;
                }
                // otherwise stop checking for tape and straighten up
                else {
                    System.out.println("\tDone looking for tape");
                    tapeFound = isLookingForTape = false;
                }
            }
            // Robot is straightening up
            else if(!straight) {
                System.out.println("\tStraightening up : dif = " + (Math.abs(RobotMap.driveJags2.getMasterJag().getPosition() - startPosition)));
                
                // If we are not straight
                if(Math.abs(roundedCurrentPos - startPosition) < TURN_AMOUNT) {
                    System.out.println("\t\t Turning : ");
                    straight = false;
                    Robot.driveTrain.driveUsingSpeed(TURN_SPEED / 3, -TURN_SPEED);
                }
                else {
                    Robot.driveTrain.stop();
                    straight = true;
                    System.out.println("\tStart pos: " + startPosition);
                    System.out.println("\tReal pos: " + RobotMap.driveJags2.getMasterJag().getPosition());
                    System.out.println("\tDONE Straightening up");
                    
                    resetStartPos();
                }
            }
            // Robot is moving forward a certain distance
            else if(!inPosition) {
                if(Math.abs(roundedCurrentPos - startPosition) < DISTANCE) {
                    Robot.driveTrain.driveUsingSpeed(FORWARD_SPEED, -FORWARD_SPEED);
                    inPosition = false;
                    System.out.println("Driving into position");
                }
                else {
                    Robot.driveTrain.stop();
                    inPosition = true;
                    System.out.println("In position");
                }
            }
            // Robot in in position and will now turn towards the correct goal
            else if(readyToFire) {
                
            }
            else if(!hasFired) {
                
            }
            
            
            
            
            
            
            
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void resetStartPos() {
        try {
            // Resetting the start position so we can use it for going forward
            startPosition = Math.abs(Jaguar.roundValue(RobotMap.driveJags2.getMasterJag().getPosition()));
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    
    // Called once after isFinished returns true
    protected void end() {}
    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
