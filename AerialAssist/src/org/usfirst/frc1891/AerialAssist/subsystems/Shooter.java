// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1891.AerialAssist.subsystems;
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import org.usfirst.frc1891.AerialAssist.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.bullbots.core.Jaguar;
import org.usfirst.frc1891.AerialAssist.Robot;

/**
 *
 */
public class Shooter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput loadSwitch = RobotMap.shooterloadSwitch;
    SpeedController shootMotor = RobotMap.shootershootMotor;
    DigitalInput shootSwitch = RobotMap.shootershootSwitch;
    AnalogChannel iRSensor2 = RobotMap.shooterIRSensor2;
    AnalogChannel iRSensor1 = RobotMap.shooterIRSensor1;
    AnalogChannel potentiometer = RobotMap.shooterpotentiometer;
    SpeedController angleMotor = RobotMap.shooterangleMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /*
    Shooter:
    1: winch needs to be ready to lock
    2: winch needs to be pulled down until it hits the loadServo (now its locked)
    3: winch needs to be unwound to release rope slack
    4: winch lock needs to be released to fire, as you do this, it should be "re-cocked"
    5: winch can now be pulled back down (start back at #2 is in "ready to lock" position)
    */
    
    private boolean 
            isCalibrated = false, 
            readyToFire = false, 
            shootRequested = false, 
            motorOffSwitch = false, 
            movingShooter = false, 
            isDown,
            readyToLoad,
            waited = false,
            firstTime = true;
    private final int 
            SHOOT_BUTTON = 1, 
            TILT_BUTTON = 2,
            LOADING_DELAY = 3000;
    private final double 
            minPotValue = 3.01, 
            maxPotValue = 4.73, 
            midPotValue = (minPotValue + maxPotValue) / 2, 
            potTolerance = 0.05,
            positionTolerance = -0.05;
    private final double ANGLE_MOTOR_SPEED = 0.25;
    
    protected void initDefaultCommand() {}
    
    public Shooter() {
        // Finding out what position the shooter is in
        isDown = potentiometer.getVoltage() > midPotValue;
         
        // If the winch is not ready to lock, get it ready to lock
        // (requesting a shoot will force the motor to lock the winch)
        if(!shootSwitch.get()) shootRequested = true;
        try {
            // Checking to make sure the shooter is ready to load
            readyToLoad = RobotMap.winchJags.getMasterJag().getPosition() >= positionTolerance;
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
    
    public void update() {
        updateShooting();
        updateTilting();
    }
    
    private void updateShooting() {
        // If shooter is not tilting and shooter is ready to shoot
        if(readyToFire && !movingShooter) {
            // Must use BOTH joysticks to shoot
            if(Robot.oi.joystickController1.isButtonDown(SHOOT_BUTTON) && Robot.oi.joystickController2.isButtonDown(SHOOT_BUTTON)) {
                readyToFire = false;
                shootRequested = true;
            }
        }
        // Shooter is not ready to fire or the shooter is tilting
        else {
            // If needed, shoots the ball and locks the winch
            if(shootRequested) fireAndLock();
            // Otherwise, if we are not loading for the first time,
            // and we have not delayed loading yet, delay for some
            // time before loading
            else if(!waited && !firstTime) {
                firstTime = false;
                waited = true;
                try {
                    Thread.sleep(LOADING_DELAY);
                }
                catch(InterruptedException e){}
            }
            else {
                // If ready to load, load
                if(readyToLoad) prepToFire();
            }
        }
    }
    
    private void updateTilting() {
        if(!movingShooter) {
            if(Robot.oi.joystickController1.isButtonDown(TILT_BUTTON) || Robot.oi.joystickController2.isButtonDown(TILT_BUTTON)) {
                movingShooter = true;
            }
        }
        else { // Shooter is moving
            
            // Rounding value to 2 decimal places in order
            // not to overload the cRIO
            double roundedPotVoltage = Jaguar.roundValue(potentiometer.getVoltage());
            
            if(isDown) { // Move it up
                // If its in position
                if(roundedPotVoltage <= minPotValue + potTolerance) {
                    angleMotor.set(0.0);
                    isDown = false;
                    movingShooter = false;
                }
                // Otherwise keep moving the motor
                else angleMotor.set(-ANGLE_MOTOR_SPEED);
            }
            else { // Move it down
                // If its in position
                if(roundedPotVoltage >= maxPotValue - potTolerance) {
                    angleMotor.set(0.0);
                    isDown = true;
                    movingShooter = false;
                }
                // Otherwise keep moving the motor
                else angleMotor.set(ANGLE_MOTOR_SPEED);
            }
        }
    }
    
    private void fireAndLock() {
        // Waiting until the lock is released (fired)
        if(!motorOffSwitch) {
            shootMotor.set(1.0);
            if(!shootSwitch.get()) motorOffSwitch = true;
        }
        // Now relocking the winch
        else if(shootSwitch.get()) {
            shootMotor.set(0.0);
            shootRequested = false;
        }
    }
    
    public void prepToFire() {
        // So far the loading is the same as the calibrating,
        // so we just call calibrate() in order to load...
        // this might be changed later
        RobotMap.winchJags.calibrate();
    }
    
    public void calibrate() {
        RobotMap.winchJags.calibrate();
    }
    public boolean isCalibrated() {
        return isCalibrated;
    }
    
    public void setCalibrated(boolean value) {
       isCalibrated = value;
    }
    
    public boolean isReadyToFire() {
        return readyToFire;
    }
    
    public void setReadyToFire(boolean value) {
       readyToFire = value;
    }
    
    public void setReadyToLoad(boolean value) {
        readyToLoad = value;
    }
    
    public void setWaited(boolean value) {
        waited = value;
    }
}
